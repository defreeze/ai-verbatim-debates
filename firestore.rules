rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function debug(msg) {
      return msg;
    }

    // Public debates collection - anyone can read, authenticated users can create and vote
    match /public_debates/{debateId} {
      allow read: if true;  // Allow public read access
      allow create: if isAuthenticated();
      allow update: if isAuthenticated() && (
        debug({
          'auth': request.auth,
          'resource': resource.data,
          'request': request.resource.data,
          'diff': request.resource.data.diff(resource.data),
          'affected': request.resource.data.diff(resource.data).affectedKeys()
        }) != null &&
        (
          // Allow debate owner to update anything
          resource.data.userId == request.auth.uid ||
          // Allow authenticated users to only update vote-related fields
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['upvotes', 'downvotes', 'votes'])
        )
      );
      allow delete: if isOwner(resource.data.userId);
    }

    // User-specific debates
    match /users/{userId}/debates/{debateId} {
      allow read, write: if isOwner(userId);
    }

    // User profiles
    match /users/{userId} {
      allow read: if true;  // Public profiles
      allow write: if isOwner(userId);
    }

    // Debate usage tracking
    match /debateUsage/{userId} {
      allow read: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
    }

    // Deny access to all other collections by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
